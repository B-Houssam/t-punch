{"ast":null,"code":"import { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';\nvar DROPZONE_BOUNDARY_DELTA = 6;\n/**\n * A class which provides an API for analyzing the `drag` events\n * of the TreeView.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar TreeViewDragAnalyzer =\n/** @class */\nfunction () {\n  /**\n   * @param event - The event that will be analyzed.\n   */\n  function TreeViewDragAnalyzer(event) {\n    this.event = event;\n    this.initialized = false;\n    this.itemId = event.itemHierarchicalIndex;\n    this.treeViewGuid = event.target.guid;\n  }\n  /**\n   * The method which initializes the analyzer.\n   * Invoke the method before you call any other methods.\n   *\n   * @returns - The analyzer object of the `drag` event.\n   */\n\n\n  TreeViewDragAnalyzer.prototype.init = function () {\n    if (!this.initialized) {\n      this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY));\n      this.initialized = true;\n    }\n\n    return this;\n  };\n\n  Object.defineProperty(TreeViewDragAnalyzer.prototype, \"isDropAllowed\", {\n    /**\n     * Returns `true` if dropping is allowed. Otherwise, returns `false`.\n     */\n    get: function () {\n      if (this.initialized && this.destItemId && this.destTreeViewGuid) {\n        // Disallow circular references.\n        return !(this.destTreeViewGuid + \"_\" + this.destItemId + \"_\").startsWith(this.treeViewGuid + \"_\" + this.itemId + \"_\");\n      } else {\n        return false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewDragAnalyzer.prototype, \"destinationMeta\", {\n    /**\n     * Returns an object which contains:\n     * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and\n     * * The `guid` of the destination TreeView (the TreeView which renders the destination item).\n     */\n    get: function () {\n      return {\n        itemHierarchicalIndex: this.destItemId,\n        treeViewGuid: this.destTreeViewGuid\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns the specific drop operation.\n   *\n   * @returns - The following values are returned:\n   * * `before`&mdash;Indicates that the dragged item is positioned at the beginning of the destination item.\n   * * `after`&mdash;Indicates that the dragged item is positioned at the end of the destination item.\n   * * `child`&mdash;Indicates that the dragged item is positioned in the middle of the destination item.\n   * * `undefined`&mdash;Indicates that dropping is not allowed.\n   */\n\n  TreeViewDragAnalyzer.prototype.getDropOperation = function () {\n    if (this.initialized && this.isDropAllowed) {\n      var _a = this.destDomNodeWithMeta.getBoundingClientRect(),\n          top_1 = _a.top,\n          height = _a.height;\n\n      if (top_1 + height - this.event.clientY < DROPZONE_BOUNDARY_DELTA) {\n        return 'after';\n      } else if (this.event.clientY - top_1 < DROPZONE_BOUNDARY_DELTA) {\n        return 'before';\n      } else {\n        return 'child';\n      }\n    } else {\n      return undefined;\n    }\n  };\n\n  TreeViewDragAnalyzer.prototype.setDestimationMeta = function (element) {\n    var node = element;\n\n    while (node && !node[DOM_KENDO_ITEM_ID_FIELD]) {\n      node = node.parentNode;\n    }\n\n    if (node && node[DOM_KENDO_ITEM_ID_FIELD]) {\n      this.destDomNodeWithMeta = node;\n      this.destItemId = node[DOM_KENDO_ITEM_ID_FIELD];\n      this.destTreeViewGuid = node[DOM_KENDO_TREEVIEW_GUID_FIELD];\n    }\n  };\n\n  return TreeViewDragAnalyzer;\n}();\n\nexport default TreeViewDragAnalyzer;","map":{"version":3,"sources":["../../src/TreeViewDragAnalyzer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';\nvar DROPZONE_BOUNDARY_DELTA = 6;\n/**\n * A class which provides an API for analyzing the `drag` events\n * of the TreeView.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     dragClue;\n *     state = { tree };\n *\n *     render() {\n *         return (\n *             <div>\n *                 <TreeView data={this.state.tree} draggable={true}\n *                     onItemDragOver={this.onItemDragOver} onItemDragEnd={this.onItemDragEnd} />\n *                 <TreeViewDragClue ref={dragClue => this.dragClue = dragClue} />\n *             </div>\n *         );\n *     }\n *\n *     onItemDragOver = (event) => {\n *         this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n *     }\n *     onItemDragEnd = (event) => {\n *         this.dragClue.hide();\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             const updatedTree = moveTreeViewItem(\n *                 event.itemHierarchicalIndex,\n *                 this.state.tree,\n *                 eventAnalyzer.getDropOperation(),\n *                 eventAnalyzer.destinationMeta.itemHierarchicalIndex,\n *             );\n *\n *             this.setState({ tree: updatedTree });\n *         }\n *     }\n *     getClueClassName(event) {\n *         const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n *         const itemIndex = eventAnalyzer.destinationMeta.itemHierarchicalIndex;\n *\n *         if (eventAnalyzer.isDropAllowed) {\n *             switch (eventAnalyzer.getDropOperation()) {\n *                 case 'child':\n *                     return 'k-i-plus';\n *                 case 'before':\n *                     return itemIndex === '0' || itemIndex.endsWith(`${SEPARATOR}0`) ?\n *                         'k-i-insert-up' : 'k-i-insert-middle';\n *                 case 'after':\n *                     const siblings = getSiblings(itemIndex, this.state.tree);\n *                     const lastIndex = Number(itemIndex.split(SEPARATOR).pop());\n *\n *                     return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n *                 default:\n *                     break;\n *             }\n *         }\n *\n *         return 'k-i-cancel';\n *     }\n * }\n *\n * function getSiblings(itemIndex, data) {\n *     let result = data;\n *\n *     const indices = itemIndex.split(SEPARATOR).map(index => Number(index));\n *     for (let i = 0; i < indices.length - 1; i++) {\n *         result = result[indices[i]].items;\n *     }\n *\n *     return result;\n * }\n *\n * const SEPARATOR = '_';\n * const tree = [{\n *     text: 'Furniture', expanded: true, items: [\n *         { text: 'Tables & Chairs', expanded: true },\n *         { text: 'Sofas', expanded: true },\n *         { text: 'Occasional Furniture', expanded: true }]\n * }, {\n *     text: 'Decor', expanded: true, items: [\n *         { text: 'Bed Linen', expanded: true },\n *         { text: 'Curtains & Blinds', expanded: true },\n *         { text: 'Carpets', expanded: true }]\n * }];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar TreeViewDragAnalyzer = /** @class */ (function () {\n    /**\n     * @param event - The event that will be analyzed.\n     */\n    function TreeViewDragAnalyzer(event) {\n        this.event = event;\n        this.initialized = false;\n        this.itemId = event.itemHierarchicalIndex;\n        this.treeViewGuid = event.target.guid;\n    }\n    /**\n     * The method which initializes the analyzer.\n     * Invoke the method before you call any other methods.\n     *\n     * @returns - The analyzer object of the `drag` event.\n     */\n    TreeViewDragAnalyzer.prototype.init = function () {\n        if (!this.initialized) {\n            this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY));\n            this.initialized = true;\n        }\n        return this;\n    };\n    Object.defineProperty(TreeViewDragAnalyzer.prototype, \"isDropAllowed\", {\n        /**\n         * Returns `true` if dropping is allowed. Otherwise, returns `false`.\n         */\n        get: function () {\n            if (this.initialized && this.destItemId && this.destTreeViewGuid) {\n                // Disallow circular references.\n                return !((this.destTreeViewGuid + \"_\" + this.destItemId + \"_\").\n                    startsWith(this.treeViewGuid + \"_\" + this.itemId + \"_\"));\n            }\n            else {\n                return false;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewDragAnalyzer.prototype, \"destinationMeta\", {\n        /**\n         * Returns an object which contains:\n         * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and\n         * * The `guid` of the destination TreeView (the TreeView which renders the destination item).\n         */\n        get: function () {\n            return { itemHierarchicalIndex: this.destItemId, treeViewGuid: this.destTreeViewGuid };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the specific drop operation.\n     *\n     * @returns - The following values are returned:\n     * * `before`&mdash;Indicates that the dragged item is positioned at the beginning of the destination item.\n     * * `after`&mdash;Indicates that the dragged item is positioned at the end of the destination item.\n     * * `child`&mdash;Indicates that the dragged item is positioned in the middle of the destination item.\n     * * `undefined`&mdash;Indicates that dropping is not allowed.\n     */\n    TreeViewDragAnalyzer.prototype.getDropOperation = function () {\n        if (this.initialized && this.isDropAllowed) {\n            var _a = this.destDomNodeWithMeta.getBoundingClientRect(), top_1 = _a.top, height = _a.height;\n            if (top_1 + height - this.event.clientY < DROPZONE_BOUNDARY_DELTA) {\n                return 'after';\n            }\n            else if (this.event.clientY - top_1 < DROPZONE_BOUNDARY_DELTA) {\n                return 'before';\n            }\n            else {\n                return 'child';\n            }\n        }\n        else {\n            return undefined;\n        }\n    };\n    TreeViewDragAnalyzer.prototype.setDestimationMeta = function (element) {\n        var node = element;\n        while (node && !node[DOM_KENDO_ITEM_ID_FIELD]) {\n            node = node.parentNode;\n        }\n        if (node && node[DOM_KENDO_ITEM_ID_FIELD]) {\n            this.destDomNodeWithMeta = node;\n            this.destItemId = node[DOM_KENDO_ITEM_ID_FIELD];\n            this.destTreeViewGuid = node[DOM_KENDO_TREEVIEW_GUID_FIELD];\n        }\n    };\n    return TreeViewDragAnalyzer;\n}());\nexport default TreeViewDragAnalyzer;\n//# sourceMappingURL=TreeViewDragAnalyzer.js.map"]},"metadata":{},"sourceType":"module"}