{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { classNames, guid, Draggable } from '@progress/kendo-react-common';\nimport { createId } from './utils/itemIdUtils';\nimport { isItemExpandedAndWithChildren, hasChildren } from './utils/itemUtils';\nimport { Reveal } from '@progress/kendo-react-animation';\nimport { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';\n/**\n * @hidden\n */\n\nvar TreeViewItem =\n/** @class */\nfunction (_super) {\n  __extends(TreeViewItem, _super);\n\n  function TreeViewItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.itemGuid = guid();\n\n    _this.onCheckChange = function (e) {\n      _this.props.onCheckChange(e, _this.item, _this.itemId);\n    };\n\n    _this.onExpandChange = function (e) {\n      _this.props.onExpandChange(e, _this.item, _this.itemId);\n    };\n\n    _this.onItemClick = function (e) {\n      _this.props.onItemClick(e, _this.item, _this.itemId);\n    };\n\n    _this.onPress = function (e) {\n      _this.props.onPress(e.event, _this.item, _this.itemId);\n    };\n\n    _this.onDrag = function (e) {\n      _this.props.onDrag(e.event, _this.item, _this.itemId);\n    };\n\n    _this.onRelease = function (e) {\n      _this.props.onRelease(e.event, _this.item, _this.itemId);\n    };\n\n    _this.assignDraggableMeta = function (element) {\n      if (element) {\n        element[DOM_KENDO_ITEM_ID_FIELD] = _this.props.itemId;\n        element[DOM_KENDO_TREEVIEW_GUID_FIELD] = _this.props.treeGuid;\n      }\n    };\n\n    return _this;\n  }\n\n  TreeViewItem.prototype.render = function () {\n    var _this = this;\n\n    var subitems = this.renderSubitemsIfApplicable();\n    var itemInPart = this.renderItemInPart();\n    return React.createElement(\"li\", {\n      className: this.getRootClassName(),\n      tabIndex: this.tabIndex,\n      role: \"treeitem\",\n      \"aria-expanded\": this.ariaExpanded,\n      \"aria-selected\": this.ariaSelected,\n      \"aria-checked\": this.ariaChecked,\n      \"aria-disabled\": this.fieldsSvc.disabled(this.item) ? true : undefined,\n      ref: function (el) {\n        return _this.itemElement = el;\n      }\n    }, React.createElement(\"div\", {\n      className: \"k-mid\",\n      ref: this.assignDraggableMeta\n    }, this.renderExpandIcon(), this.renderCheckbox(), this.props.draggable ? React.createElement(Draggable, {\n      onPress: this.onPress,\n      onDrag: this.onDrag,\n      onRelease: this.onRelease\n    }, itemInPart) : itemInPart), this.props.animate ? React.createElement(Reveal, {\n      transitionEnterDuration: 200,\n      transitionExitDuration: 200,\n      style: {\n        display: 'block'\n      },\n      children: subitems\n    }) : subitems);\n  };\n\n  TreeViewItem.prototype.componentDidMount = function () {\n    var focusedItemId = this.props.focusedItemId;\n    var currentItemId = this.itemId;\n\n    if (focusedItemId && focusedItemId === currentItemId) {\n      this.props.onFocusDomElNeeded(this.itemElement);\n    }\n\n    if (this.checkboxElement) {\n      this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item);\n    }\n  };\n\n  TreeViewItem.prototype.componentDidUpdate = function (prevProps) {\n    var focusedItemId = this.props.focusedItemId;\n\n    if (focusedItemId && focusedItemId !== prevProps.focusedItemId && focusedItemId === this.itemId) {\n      this.props.onFocusDomElNeeded(this.itemElement);\n    }\n\n    if (this.checkboxElement) {\n      var indeterminate = this.fieldsSvc.checkIndeterminate(this.item);\n\n      if (indeterminate !== prevProps.fieldsService.checkIndeterminate(prevProps.item)) {\n        this.checkboxElement.indeterminate = indeterminate;\n      }\n    }\n  };\n\n  TreeViewItem.prototype.renderCheckbox = function () {\n    var _this = this;\n\n    if (this.props.checkboxes) {\n      return React.createElement(\"div\", {\n        className: \"k-checkbox-wrapper\"\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        className: \"k-checkbox\",\n        checked: Boolean(this.fieldsSvc.checked(this.item)),\n        id: this.itemGuid,\n        tabIndex: -1,\n        onChange: this.onCheckChange,\n        ref: function (el) {\n          return _this.checkboxElement = el;\n        }\n      }), React.createElement(\"label\", {\n        className: \"k-checkbox-label\",\n        htmlFor: this.itemGuid\n      }));\n    } else {\n      return undefined;\n    }\n  };\n\n  TreeViewItem.prototype.renderExpandIcon = function () {\n    return this.props.expandIcons && ( // If it is explicitly said that the item has children (even not loaded yet)\n    // or if the item actually has children, then render the icon.\n    this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField())) ? React.createElement(\"span\", {\n      className: this.getIconClassName(),\n      onClick: this.onExpandChange\n    }) : undefined;\n  };\n\n  TreeViewItem.prototype.renderSubitemsIfApplicable = function () {\n    var _this = this;\n\n    return isItemExpandedAndWithChildren(this.item, this.fieldsSvc) ? React.createElement(\"ul\", {\n      className: \"k-content\",\n      role: \"group\"\n    }, this.fieldsSvc.children(this.item).map(function (item, index) {\n      return React.createElement(TreeViewItem, {\n        item: item,\n        itemId: createId(index, _this.itemId),\n        treeGuid: _this.props.treeGuid,\n        animate: _this.props.animate,\n        focusedItemId: _this.props.focusedItemId,\n        tabbableItemId: _this.props.tabbableItemId,\n        fieldsService: _this.props.fieldsService,\n        itemUI: _this.props.itemUI,\n        checkboxes: _this.props.checkboxes,\n        ariaMultiSelectable: _this.props.ariaMultiSelectable,\n        onItemClick: _this.props.onItemClick,\n        onFocusDomElNeeded: _this.props.onFocusDomElNeeded,\n        draggable: _this.props.draggable,\n        onPress: _this.props.onPress,\n        onDrag: _this.props.onDrag,\n        onRelease: _this.props.onRelease,\n        expandIcons: _this.props.expandIcons,\n        onExpandChange: _this.props.onExpandChange,\n        onCheckChange: _this.props.onCheckChange,\n        key: index\n      });\n    })) : undefined;\n  };\n\n  TreeViewItem.prototype.renderItemInPart = function () {\n    return React.createElement(\"span\", {\n      className: this.getContentClassName(),\n      style: {\n        touchAction: 'none'\n      },\n      onClick: this.onItemClick\n    }, this.props.itemUI ? React.createElement(this.props.itemUI, {\n      item: this.item,\n      itemHierarchicalIndex: this.itemId\n    }) : this.fieldsSvc.text(this.item));\n  };\n\n  Object.defineProperty(TreeViewItem.prototype, \"fieldsSvc\", {\n    get: function () {\n      return this.props.fieldsService;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"itemId\", {\n    get: function () {\n      return this.props.itemId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"item\", {\n    get: function () {\n      return this.props.item;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"tabIndex\", {\n    get: function () {\n      return (this.props.focusedItemId || this.props.tabbableItemId) === this.itemId ? 0 : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"ariaExpanded\", {\n    get: function () {\n      return this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()) ? Boolean(this.fieldsSvc.expanded(this.item)) : undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"ariaChecked\", {\n    get: function () {\n      if (this.props.checkboxes) {\n        if (this.fieldsSvc.checked(this.item)) {\n          return 'true';\n        } else {\n          return this.fieldsSvc.checkIndeterminate(this.item) ? 'mixed' : 'false';\n        }\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeViewItem.prototype, \"ariaSelected\", {\n    get: function () {\n      if (this.fieldsSvc.selected(this.item)) {\n        return true;\n      } else if (this.props.ariaMultiSelectable) {\n        return this.fieldsSvc.disabled(this.item) ? undefined : false;\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TreeViewItem.prototype.getIconClassName = function () {\n    return classNames('k-icon', {\n      'k-i-expand': !this.fieldsSvc.expanded(this.item),\n      'k-i-collapse': this.fieldsSvc.expanded(this.item),\n      'k-i-loading': this.fieldsSvc.expanded(this.item) && !hasChildren(this.item, this.fieldsSvc.getChildrenField())\n    });\n  };\n\n  TreeViewItem.prototype.getRootClassName = function () {\n    return classNames('k-item k-treeview-item', {\n      'k-state-disabled': this.fieldsSvc.disabled(this.item)\n    });\n  };\n\n  TreeViewItem.prototype.getContentClassName = function () {\n    return classNames('k-in', {\n      'k-state-focused': this.props.focusedItemId === this.itemId,\n      'k-state-selected': this.fieldsSvc.selected(this.item)\n    });\n  };\n\n  return TreeViewItem;\n}(React.Component);\n\nexport default TreeViewItem;","map":{"version":3,"sources":["../../src/TreeViewItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport { classNames, guid, Draggable } from '@progress/kendo-react-common';\nimport { createId } from './utils/itemIdUtils';\nimport { isItemExpandedAndWithChildren, hasChildren } from './utils/itemUtils';\nimport { Reveal } from '@progress/kendo-react-animation';\nimport { DOM_KENDO_ITEM_ID_FIELD, DOM_KENDO_TREEVIEW_GUID_FIELD } from './utils/consts';\n/**\n * @hidden\n */\nvar TreeViewItem = /** @class */ (function (_super) {\n    __extends(TreeViewItem, _super);\n    function TreeViewItem() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.itemGuid = guid();\n        _this.onCheckChange = function (e) {\n            _this.props.onCheckChange(e, _this.item, _this.itemId);\n        };\n        _this.onExpandChange = function (e) {\n            _this.props.onExpandChange(e, _this.item, _this.itemId);\n        };\n        _this.onItemClick = function (e) {\n            _this.props.onItemClick(e, _this.item, _this.itemId);\n        };\n        _this.onPress = function (e) {\n            _this.props.onPress(e.event, _this.item, _this.itemId);\n        };\n        _this.onDrag = function (e) {\n            _this.props.onDrag(e.event, _this.item, _this.itemId);\n        };\n        _this.onRelease = function (e) {\n            _this.props.onRelease(e.event, _this.item, _this.itemId);\n        };\n        _this.assignDraggableMeta = function (element) {\n            if (element) {\n                element[DOM_KENDO_ITEM_ID_FIELD] = _this.props.itemId;\n                element[DOM_KENDO_TREEVIEW_GUID_FIELD] = _this.props.treeGuid;\n            }\n        };\n        return _this;\n    }\n    TreeViewItem.prototype.render = function () {\n        var _this = this;\n        var subitems = this.renderSubitemsIfApplicable();\n        var itemInPart = this.renderItemInPart();\n        return (React.createElement(\"li\", { className: this.getRootClassName(), tabIndex: this.tabIndex, role: \"treeitem\", \"aria-expanded\": this.ariaExpanded, \"aria-selected\": this.ariaSelected, \"aria-checked\": this.ariaChecked, \"aria-disabled\": this.fieldsSvc.disabled(this.item) ? true : undefined, ref: function (el) { return _this.itemElement = el; } },\n            React.createElement(\"div\", { className: \"k-mid\", ref: this.assignDraggableMeta },\n                this.renderExpandIcon(),\n                this.renderCheckbox(),\n                this.props.draggable ?\n                    React.createElement(Draggable, { onPress: this.onPress, onDrag: this.onDrag, onRelease: this.onRelease }, itemInPart) : itemInPart),\n            this.props.animate ?\n                React.createElement(Reveal, { transitionEnterDuration: 200, transitionExitDuration: 200, style: { display: 'block' }, children: subitems }) : subitems));\n    };\n    TreeViewItem.prototype.componentDidMount = function () {\n        var focusedItemId = this.props.focusedItemId;\n        var currentItemId = this.itemId;\n        if (focusedItemId && focusedItemId === currentItemId) {\n            this.props.onFocusDomElNeeded(this.itemElement);\n        }\n        if (this.checkboxElement) {\n            this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item);\n        }\n    };\n    TreeViewItem.prototype.componentDidUpdate = function (prevProps) {\n        var focusedItemId = this.props.focusedItemId;\n        if (focusedItemId &&\n            focusedItemId !== prevProps.focusedItemId &&\n            focusedItemId === this.itemId) {\n            this.props.onFocusDomElNeeded(this.itemElement);\n        }\n        if (this.checkboxElement) {\n            var indeterminate = this.fieldsSvc.checkIndeterminate(this.item);\n            if (indeterminate !== prevProps.fieldsService.checkIndeterminate(prevProps.item)) {\n                this.checkboxElement.indeterminate = indeterminate;\n            }\n        }\n    };\n    TreeViewItem.prototype.renderCheckbox = function () {\n        var _this = this;\n        if (this.props.checkboxes) {\n            return (React.createElement(\"div\", { className: \"k-checkbox-wrapper\" },\n                React.createElement(\"input\", { type: \"checkbox\", className: \"k-checkbox\", checked: Boolean(this.fieldsSvc.checked(this.item)), id: this.itemGuid, tabIndex: -1, onChange: this.onCheckChange, ref: function (el) { return _this.checkboxElement = el; } }),\n                React.createElement(\"label\", { className: \"k-checkbox-label\", htmlFor: this.itemGuid })));\n        }\n        else {\n            return undefined;\n        }\n    };\n    TreeViewItem.prototype.renderExpandIcon = function () {\n        return this.props.expandIcons &&\n            // If it is explicitly said that the item has children (even not loaded yet)\n            // or if the item actually has children, then render the icon.\n            (this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField())) ?\n            React.createElement(\"span\", { className: this.getIconClassName(), onClick: this.onExpandChange }) : undefined;\n    };\n    TreeViewItem.prototype.renderSubitemsIfApplicable = function () {\n        var _this = this;\n        return isItemExpandedAndWithChildren(this.item, this.fieldsSvc) ?\n            (React.createElement(\"ul\", { className: \"k-content\", role: \"group\" }, this.fieldsSvc.children(this.item).map(function (item, index) {\n                return (React.createElement(TreeViewItem, { item: item, itemId: createId(index, _this.itemId), treeGuid: _this.props.treeGuid, animate: _this.props.animate, focusedItemId: _this.props.focusedItemId, tabbableItemId: _this.props.tabbableItemId, fieldsService: _this.props.fieldsService, itemUI: _this.props.itemUI, checkboxes: _this.props.checkboxes, ariaMultiSelectable: _this.props.ariaMultiSelectable, onItemClick: _this.props.onItemClick, onFocusDomElNeeded: _this.props.onFocusDomElNeeded, draggable: _this.props.draggable, onPress: _this.props.onPress, onDrag: _this.props.onDrag, onRelease: _this.props.onRelease, expandIcons: _this.props.expandIcons, onExpandChange: _this.props.onExpandChange, onCheckChange: _this.props.onCheckChange, key: index }));\n            }))) : undefined;\n    };\n    TreeViewItem.prototype.renderItemInPart = function () {\n        return (React.createElement(\"span\", { className: this.getContentClassName(), style: { touchAction: 'none' }, onClick: this.onItemClick }, this.props.itemUI ?\n            React.createElement(this.props.itemUI, { item: this.item, itemHierarchicalIndex: this.itemId }) :\n            this.fieldsSvc.text(this.item)));\n    };\n    Object.defineProperty(TreeViewItem.prototype, \"fieldsSvc\", {\n        get: function () {\n            return this.props.fieldsService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewItem.prototype, \"itemId\", {\n        get: function () {\n            return this.props.itemId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewItem.prototype, \"item\", {\n        get: function () {\n            return this.props.item;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewItem.prototype, \"tabIndex\", {\n        get: function () {\n            return (this.props.focusedItemId || this.props.tabbableItemId) === this.itemId ? 0 : -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewItem.prototype, \"ariaExpanded\", {\n        get: function () {\n            return this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()) ?\n                Boolean(this.fieldsSvc.expanded(this.item)) : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewItem.prototype, \"ariaChecked\", {\n        get: function () {\n            if (this.props.checkboxes) {\n                if (this.fieldsSvc.checked(this.item)) {\n                    return 'true';\n                }\n                else {\n                    return this.fieldsSvc.checkIndeterminate(this.item) ? 'mixed' : 'false';\n                }\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeViewItem.prototype, \"ariaSelected\", {\n        get: function () {\n            if (this.fieldsSvc.selected(this.item)) {\n                return true;\n            }\n            else if (this.props.ariaMultiSelectable) {\n                return this.fieldsSvc.disabled(this.item) ? undefined : false;\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TreeViewItem.prototype.getIconClassName = function () {\n        return classNames('k-icon', {\n            'k-i-expand': !this.fieldsSvc.expanded(this.item),\n            'k-i-collapse': this.fieldsSvc.expanded(this.item),\n            'k-i-loading': this.fieldsSvc.expanded(this.item) && !hasChildren(this.item, this.fieldsSvc.getChildrenField())\n        });\n    };\n    TreeViewItem.prototype.getRootClassName = function () {\n        return classNames('k-item k-treeview-item', { 'k-state-disabled': this.fieldsSvc.disabled(this.item) });\n    };\n    TreeViewItem.prototype.getContentClassName = function () {\n        return classNames('k-in', {\n            'k-state-focused': this.props.focusedItemId === this.itemId,\n            'k-state-selected': this.fieldsSvc.selected(this.item)\n        });\n    };\n    return TreeViewItem;\n}(React.Component));\nexport default TreeViewItem;\n//# sourceMappingURL=TreeViewItem.js.map"]},"metadata":{},"sourceType":"module"}