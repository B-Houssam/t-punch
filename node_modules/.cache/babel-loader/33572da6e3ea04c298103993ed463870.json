{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useAsyncFocusBlur } from '../hooks/useAsyncFocusBlur';\n/**\n * An utility High-order Component for asynchronous focus/blur handling.\n *\n * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.\n * Use this utility HOC for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.\n *\n * @returns\n */\n\nexport var AsyncFocusBlur = function (_a) {\n  var children = _a.children,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      onSyncFocus = _a.onSyncFocus,\n      onSyncBlur = _a.onSyncBlur;\n  var args = useAsyncFocusBlur({\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onSyncFocus: onSyncFocus,\n    onSyncBlur: onSyncBlur\n  });\n  return children.call(undefined, __assign({}, args));\n};","map":{"version":3,"sources":["../../../src/hocs/AsyncFocusBlur.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,SAA6B,iBAA7B,QAAsD,4BAAtD;AAEA;;;;;;;AAOG;;AACH,OAAO,IAAM,cAAc,GAAG,UAAC,EAAD,EAM6D;MALvF,QAAA,GAAA,EAAA,CAAA,Q;MACA,OAAA,GAAA,EAAA,CAAA,O;MACA,MAAA,GAAA,EAAA,CAAA,M;MACA,WAAA,GAAA,EAAA,CAAA,W;MACA,UAAA,GAAA,EAAA,CAAA,U;AAEA,MAAM,IAAI,GAAG,iBAAiB,CAAC;AAAC,IAAA,OAAO,EAAA,OAAR;AAAU,IAAA,MAAM,EAAA,MAAhB;AAAkB,IAAA,WAAW,EAAA,WAA7B;AAA+B,IAAA,UAAU,EAAA;AAAzC,GAAD,CAA9B;AAEA,SAAO,QAAQ,CAAC,IAAT,CAAc,SAAd,EAAuB,QAAA,CAAA,EAAA,EAAM,IAAN,CAAvB,CAAP;AACH,CAVM","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useAsyncFocusBlur } from '../hooks/useAsyncFocusBlur';\n/**\n * An utility High-order Component for asynchronous focus/blur handling.\n *\n * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.\n * Use this utility HOC for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.\n *\n * @returns\n */\nexport var AsyncFocusBlur = function (_a) {\n    var children = _a.children, onFocus = _a.onFocus, onBlur = _a.onBlur, onSyncFocus = _a.onSyncFocus, onSyncBlur = _a.onSyncBlur;\n    var args = useAsyncFocusBlur({ onFocus: onFocus, onBlur: onBlur, onSyncFocus: onSyncFocus, onSyncBlur: onSyncBlur });\n    return children.call(undefined, __assign({}, args));\n};\n//# sourceMappingURL=AsyncFocusBlur.js.map"]},"metadata":{},"sourceType":"module"}