{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Gets and sets the children. Returns the children or the re-created item with the new children.\n\n\nfunction children(item, subItemsField, subItems) {\n  var _a;\n\n  if (subItems) {\n    return __assign({}, item, (_a = {}, _a[subItemsField] = subItems.length ? subItems.slice() : undefined, _a));\n  } else {\n    return item && item[subItemsField] ? item[subItemsField].slice() : [];\n  }\n}\n\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n  if (dataItem[subItemsField]) {\n    var subItems = children(dataItem, subItemsField).map(function (child) {\n      return mapItem(child, subItemsField, callbackfn);\n    });\n    return callbackfn(children(dataItem, subItemsField, subItems));\n  }\n\n  return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\n\nexport var mapTree = function (tree, subItemsField, callback) {\n  return tree.map(function (item) {\n    return mapItem(item, subItemsField, callback);\n  }).slice();\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n  var curData = tree;\n  var parentNodes = [];\n\n  for (var i = 0; i < level.length; i++) {\n    curData = curData[level[i]];\n    curData = Array.isArray(curData) ? curData : curData[subItemsField];\n    parentNodes.push(curData);\n  }\n\n  var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n  var newItemIndex = level[level.length - 1];\n  var newItem = callback(parent[newItemIndex]);\n  parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\n\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n  var _a;\n\n  return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\n\nexport var getItemPath = function (tree, level, subItemsField) {\n  var nodes = [];\n  var itemLevel = level.slice();\n\n  if (itemLevel.length) {\n    var element = tree[itemLevel.shift() || 0];\n    nodes.push(element);\n\n    while (itemLevel.length && subItemsField) {\n      element = element[subItemsField][itemLevel.shift() || 0];\n      nodes.push(element);\n    }\n  }\n\n  return nodes;\n};","map":{"version":3,"sources":["../../src/treeDataOperations.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Gets and sets the children. Returns the children or the re-created item with the new children.\nfunction children(item, subItemsField, subItems) {\n    var _a;\n    if (subItems) {\n        return __assign({}, item, (_a = {}, _a[subItemsField] = subItems.length ? subItems.slice() : undefined, _a));\n    }\n    else {\n        return item && item[subItemsField] ? item[subItemsField].slice() : [];\n    }\n}\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n    if (dataItem[subItemsField]) {\n        var subItems = children(dataItem, subItemsField).map(function (child) { return mapItem(child, subItemsField, callbackfn); });\n        return callbackfn(children(dataItem, subItemsField, subItems));\n    }\n    return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTree = function (tree, subItemsField, callback) {\n    return tree.map(function (item) { return mapItem(item, subItemsField, callback); }).slice();\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n    var curData = tree;\n    var parentNodes = [];\n    for (var i = 0; i < level.length; i++) {\n        curData = curData[level[i]];\n        curData = Array.isArray(curData) ? curData : curData[subItemsField];\n        parentNodes.push(curData);\n    }\n    var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n    var newItemIndex = level[level.length - 1];\n    var newItem = callback(parent[newItemIndex]);\n    parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n    var _a;\n    return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\nexport var getItemPath = function (tree, level, subItemsField) {\n    var nodes = [];\n    var itemLevel = level.slice();\n    if (itemLevel.length) {\n        var element = tree[itemLevel.shift() || 0];\n        nodes.push(element);\n        while (itemLevel.length && subItemsField) {\n            element = element[subItemsField][itemLevel.shift() || 0];\n            nodes.push(element);\n        }\n    }\n    return nodes;\n};\n//# sourceMappingURL=treeDataOperations.js.map"]},"metadata":{},"sourceType":"module"}