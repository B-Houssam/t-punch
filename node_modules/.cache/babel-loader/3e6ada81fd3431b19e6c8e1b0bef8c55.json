{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { getAllDirectIndirectChildrenIds, areAllDirectChildrenChecked, getAllParents } from './utils/itemUtils';\nimport { getDirectParentId, getItemById } from './utils/itemIdUtils';\nimport { isArray, getNestedValue } from './utils/misc';\nimport { CHILDREN_FIELD } from './utils/consts';\n/**\n * A helper function which updates the check descriptor.\n *\n * @param event - The event that triggered the change.\n * @param check - The check descriptor that will be updated.\n * @param data - The TreeView items.\n * @param settings - The additional settings that configure the update of the check descriptor.\n * @param childrenField - The field that points to the dataItem sub items. Defaults to `items`.\n * The default behavior allows the selection of multiple items.\n * @returns - The updated copy of the input check descriptor.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    state = { check: [], items: tree };\n *    render() {\n *        return (\n *            <div>\n *                <TreeView\n *                    checkboxes={true} onCheckChange={this.onCheckChange}\n *                    data={processTreeViewItems(this.state.items, { check: this.state.check })}\n *                />\n *                <div style={{ marginTop: 5 }}>\n *                    <i>Press SPACE to check/uncheck the active item</i>\n *                    <div className=\"example-config\">\n *                        Checked Indices: {this.state.check.join(\",\")}\n *                    </div>\n *                </div>\n *            </div>\n *        );\n *    }\n *    onCheckChange = (event) => {\n *        this.setState({ check: handleTreeViewCheckChange(event, this.state.check, this.state.items) });\n *    }\n * }\n *\n * const tree = [ {\n *    text: 'Furniture', expanded: true, items: [\n *        { text: 'Tables & Chairs' }, { text: 'Sofas' }, { text: 'Occasional Furniture' } ]\n * }, {\n *    text: 'Decor', expanded: true, items: [\n *        { text: 'Bed Linen' }, { text: 'Curtains & Blinds' }, { text: 'Carpets' } ]\n * } ];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nexport function handleTreeViewCheckChange(event, check, data, settings, childrenField) {\n  if (settings === void 0) {\n    settings = {};\n  }\n\n  if (!data || !data.length) {\n    return [];\n  }\n\n  var _a = parseOperation(check),\n      ids = _a.ids,\n      idField = _a.idField;\n\n  var itemId = idField ? getNestedValue(idField, event.item) : event.itemHierarchicalIndex;\n  var idIndex = ids.indexOf(itemId);\n  var itemJustChecked = idIndex === -1;\n  var subItemsField = childrenField || CHILDREN_FIELD;\n  var newIds;\n\n  if (settings.singleMode) {\n    newIds = itemJustChecked ? [itemId] : [];\n  } else {\n    newIds = ids.slice();\n    itemJustChecked ? newIds.push(itemId) : newIds.splice(idIndex, 1);\n\n    if (settings.checkChildren) {\n      checkChildren(event.item, event.itemHierarchicalIndex, itemJustChecked, idField, subItemsField, newIds);\n    }\n\n    if (settings.checkParents) {\n      checkParents(event.itemHierarchicalIndex, itemJustChecked, idField, subItemsField, newIds, data);\n    }\n  }\n\n  return isArray(check) ? newIds : Object.assign({}, check, {\n    ids: newIds\n  });\n}\n\nfunction parseOperation(operation) {\n  var ids;\n  var idField = undefined;\n\n  if (isArray(operation)) {\n    ids = operation;\n  } else {\n    ids = operation.ids || [];\n    idField = operation.idField;\n  }\n\n  return {\n    ids: ids,\n    idField: idField\n  };\n}\n\nfunction checkChildren(item, itemHierarchicalIndex, itemJustChecked, idField, childrenField, ids) {\n  getAllDirectIndirectChildrenIds(item, itemHierarchicalIndex, childrenField, idField).forEach(function (itemId) {\n    if (itemJustChecked && ids.indexOf(itemId) === -1) {\n      ids.push(itemId);\n    } else if (!itemJustChecked && ids.indexOf(itemId) > -1) {\n      ids.splice(ids.indexOf(itemId), 1);\n    }\n  });\n}\n\nfunction checkParents(itemHierarchicalIndex, itemJustChecked, idField, childrenField, ids, data) {\n  var it = makeParentsIterator();\n  var result = it.next();\n  itemJustChecked ? check() : uncheck();\n\n  function check() {\n    // Check all parents which have all their children checked.\n    while (!result.done) {\n      var _a = result.value,\n          id = _a.id,\n          item = _a.item; // The first check is needed. However, it is not sure whether to stop the entire loop.\n\n      if (ids.indexOf(id) === -1 && areAllDirectChildrenChecked(item, id, idField, childrenField, ids)) {\n        ids.push(id);\n        result = it.next();\n      } else {\n        break;\n      }\n    }\n  }\n\n  function uncheck() {\n    // Uncheck parents until an already unchecked parent is reached.\n    while (!result.done) {\n      var id = result.value.id;\n      var idIndex = ids.indexOf(id);\n\n      if (idIndex > -1) {\n        ids.splice(idIndex, 1);\n        result = it.next();\n      } else {\n        break;\n      }\n    }\n  } // When called for unchecking, the parent items are not needed.\n  // That is why, for optimization, they are not returned.\n\n\n  function makeParentsIterator() {\n    var parents, i, parentId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!idField) return [3\n          /*break*/\n          , 5];\n          parents = getAllParents(itemHierarchicalIndex, childrenField, data);\n          i = parents.length - 1;\n          _a.label = 1;\n\n        case 1:\n          if (!(i > -1)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , {\n            id: getNestedValue(idField, parents[i]),\n            item: itemJustChecked ? parents[i] : undefined\n          }];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          i--;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [3\n          /*break*/\n          , 8];\n\n        case 5:\n          parentId = getDirectParentId(itemHierarchicalIndex);\n          _a.label = 6;\n\n        case 6:\n          if (!parentId) return [3\n          /*break*/\n          , 8];\n          return [4\n          /*yield*/\n          , {\n            id: parentId,\n            item: itemJustChecked ? getItemById(parentId, data, childrenField) : undefined\n          }];\n\n        case 7:\n          _a.sent();\n\n          parentId = getDirectParentId(parentId);\n          return [3\n          /*break*/\n          , 6];\n\n        case 8:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../src/handleTreeViewCheckChange.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,+BAAT,EAA0C,2BAA1C,EAAuE,aAAvE,QAA4F,mBAA5F;AACA,SAAS,iBAAT,EAA4B,WAA5B,QAA+C,qBAA/C;AAEA,SAAS,OAAT,EAAkB,cAAlB,QAAwC,cAAxC;AACA,SAAS,cAAT,QAA+B,gBAA/B;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG;;AACH,OAAM,SAAU,yBAAV,CACF,KADE,EAEF,KAFE,EAGF,IAHE,EAIF,QAJE,EAKF,aALE,EAKoB;AADtB,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,EAAA;AAA0C;;AAG1C,MAAI,CAAC,IAAD,IAAS,CAAC,IAAI,CAAC,MAAnB,EAA2B;AACvB,WAAO,EAAP;AACH;;AAEK,MAAA,EAAA,GAAA,cAAA,CAAA,KAAA,CAAA;AAAA,MAAE,GAAA,GAAA,EAAA,CAAA,GAAF;AAAA,MAAO,OAAA,GAAA,EAAA,CAAA,OAAP;;AACN,MAAM,MAAM,GAAG,OAAO,GAAG,cAAc,CAAC,OAAD,EAAU,KAAK,CAAC,IAAhB,CAAjB,GAAyC,KAAK,CAAC,qBAArE;AACA,MAAM,OAAO,GAAG,GAAG,CAAC,OAAJ,CAAY,MAAZ,CAAhB;AACA,MAAM,eAAe,GAAG,OAAO,KAAK,CAAC,CAArC;AACA,MAAM,aAAa,GAAG,aAAa,IAAI,cAAvC;AAEA,MAAI,MAAJ;;AACA,MAAI,QAAQ,CAAC,UAAb,EAAyB;AACrB,IAAA,MAAM,GAAG,eAAe,GAAG,CAAC,MAAD,CAAH,GAAc,EAAtC;AACH,GAFD,MAEO;AACH,IAAA,MAAM,GAAG,GAAG,CAAC,KAAJ,EAAT;AACA,IAAA,eAAe,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAH,GAAyB,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,CAAvB,CAAxC;;AAEA,QAAI,QAAQ,CAAC,aAAb,EAA4B;AACxB,MAAA,aAAa,CAAC,KAAK,CAAC,IAAP,EAAa,KAAK,CAAC,qBAAnB,EAA0C,eAA1C,EAA2D,OAA3D,EAAoE,aAApE,EAAmF,MAAnF,CAAb;AACH;;AACD,QAAI,QAAQ,CAAC,YAAb,EAA2B;AACvB,MAAA,YAAY,CAAC,KAAK,CAAC,qBAAP,EAA8B,eAA9B,EAA+C,OAA/C,EAAwD,aAAxD,EAAuE,MAAvE,EAA+E,IAA/E,CAAZ;AACH;AACJ;;AAED,SAAO,OAAO,CAAC,KAAD,CAAP,GAAiB,MAAjB,GAA0B,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAlB,EAAyB;AAAE,IAAA,GAAG,EAAE;AAAP,GAAzB,CAAjC;AACH;;AAED,SAAS,cAAT,CAAwB,SAAxB,EAAqE;AACjE,MAAI,GAAJ;AACA,MAAI,OAAO,GAAuB,SAAlC;;AAEA,MAAI,OAAO,CAAC,SAAD,CAAX,EAAwB;AACpB,IAAA,GAAG,GAAG,SAAN;AACH,GAFD,MAEO;AACH,IAAA,GAAG,GAAG,SAAS,CAAC,GAAV,IAAiB,EAAvB;AACA,IAAA,OAAO,GAAG,SAAS,CAAC,OAApB;AACH;;AAED,SAAO;AAAE,IAAA,GAAG,EAAA,GAAL;AAAO,IAAA,OAAO,EAAA;AAAd,GAAP;AACH;;AAED,SAAS,aAAT,CACI,IADJ,EAEI,qBAFJ,EAGI,eAHJ,EAII,OAJJ,EAKI,aALJ,EAMI,GANJ,EAMc;AAEV,EAAA,+BAA+B,CAAC,IAAD,EAAO,qBAAP,EAA8B,aAA9B,EAA6C,OAA7C,CAA/B,CAAqF,OAArF,CAA6F,UAAA,MAAA,EAAM;AAC/F,QAAI,eAAe,IAAI,GAAG,CAAC,OAAJ,CAAY,MAAZ,MAAwB,CAAC,CAAhD,EAAmD;AAC/C,MAAA,GAAG,CAAC,IAAJ,CAAS,MAAT;AACH,KAFD,MAEO,IAAI,CAAC,eAAD,IAAoB,GAAG,CAAC,OAAJ,CAAY,MAAZ,IAAsB,CAAC,CAA/C,EAAkD;AACrD,MAAA,GAAG,CAAC,MAAJ,CAAW,GAAG,CAAC,OAAJ,CAAY,MAAZ,CAAX,EAAgC,CAAhC;AACH;AACJ,GAND;AAOH;;AAED,SAAS,YAAT,CACI,qBADJ,EAEI,eAFJ,EAGI,OAHJ,EAII,aAJJ,EAKI,GALJ,EAMI,IANJ,EAMe;AAEX,MAAM,EAAE,GAAQ,mBAAmB,EAAnC;AACA,MAAI,MAAM,GAAG,EAAE,CAAC,IAAH,EAAb;AACA,EAAA,eAAe,GAAG,KAAK,EAAR,GAAa,OAAO,EAAnC;;AAEA,WAAS,KAAT,GAAc;AACV;AACA,WAAO,CAAC,MAAM,CAAC,IAAf,EAAqB;AACX,UAAA,EAAA,GAAA,MAAA,CAAA,KAAA;AAAA,UAAE,EAAA,GAAA,EAAA,CAAA,EAAF;AAAA,UAAM,IAAA,GAAA,EAAA,CAAA,IAAN,CADW,CAGjB;;AACA,UAAI,GAAG,CAAC,OAAJ,CAAY,EAAZ,MAAoB,CAAC,CAArB,IACA,2BAA2B,CAAC,IAAD,EAAO,EAAP,EAAW,OAAX,EAAoB,aAApB,EAAmC,GAAnC,CAD/B,EACwE;AACpE,QAAA,GAAG,CAAC,IAAJ,CAAS,EAAT;AAEA,QAAA,MAAM,GAAG,EAAE,CAAC,IAAH,EAAT;AACH,OALD,MAKO;AACH;AACH;AACJ;AACJ;;AAED,WAAS,OAAT,GAAgB;AACZ;AACA,WAAO,CAAC,MAAM,CAAC,IAAf,EAAqB;AACT,UAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,EAAA;AACR,UAAM,OAAO,GAAG,GAAG,CAAC,OAAJ,CAAY,EAAZ,CAAhB;;AACA,UAAI,OAAO,GAAG,CAAC,CAAf,EAAkB;AACd,QAAA,GAAG,CAAC,MAAJ,CAAW,OAAX,EAAoB,CAApB;AAEA,QAAA,MAAM,GAAG,EAAE,CAAC,IAAH,EAAT;AACH,OAJD,MAIO;AACH;AACH;AACJ;AACJ,GApCU,CAsCX;AACA;;;AACA,WAAU,mBAAV,GAA6B;;;;;eACrB,O,EAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACM,UAAA,OAAO,GAAG,aAAa,CAAC,qBAAD,EAAwB,aAAxB,EAAuC,IAAvC,CAAvB;AAEG,UAAA,CAAC,GAAG,OAAO,CAAC,MAAR,GAAiB,CAArB;;;;cAAwB,EAAA,CAAC,GAAG,CAAC,CAAL,C,EAAM,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACnC,iBAAA,CAAA;AAAA;AAAA,YAAM;AAAE,YAAA,EAAE,EAAE,cAAc,CAAC,OAAD,EAAU,OAAO,CAAC,CAAD,CAAjB,CAApB;AAA2C,YAAA,IAAI,EAAE,eAAe,GAAG,OAAO,CAAC,CAAD,CAAV,GAAgB;AAAhF,WAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;AADqC,UAAA,CAAC;;;;;;;;;;;AAItC,UAAA,QAAQ,GAAG,iBAAiB,CAAC,qBAAD,CAA5B;;;;eACG,Q,EAAQ,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACX,iBAAA,CAAA;AAAA;AAAA,YAAM;AAAE,YAAA,EAAE,EAAE,QAAN;AAAgB,YAAA,IAAI,EAAE,eAAe,GAAG,WAAW,CAAC,QAAD,EAAW,IAAX,EAAiB,aAAjB,CAAd,GAAgD;AAArF,WAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;AACA,UAAA,QAAQ,GAAG,iBAAiB,CAAC,QAAD,CAA5B;;;;;;;;;;;AAGX;AACJ","sourceRoot":"","sourcesContent":["var __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { getAllDirectIndirectChildrenIds, areAllDirectChildrenChecked, getAllParents } from './utils/itemUtils';\nimport { getDirectParentId, getItemById } from './utils/itemIdUtils';\nimport { isArray, getNestedValue } from './utils/misc';\nimport { CHILDREN_FIELD } from './utils/consts';\n/**\n * A helper function which updates the check descriptor.\n *\n * @param event - The event that triggered the change.\n * @param check - The check descriptor that will be updated.\n * @param data - The TreeView items.\n * @param settings - The additional settings that configure the update of the check descriptor.\n * @param childrenField - The field that points to the dataItem sub items. Defaults to `items`.\n * The default behavior allows the selection of multiple items.\n * @returns - The updated copy of the input check descriptor.\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    state = { check: [], items: tree };\n *    render() {\n *        return (\n *            <div>\n *                <TreeView\n *                    checkboxes={true} onCheckChange={this.onCheckChange}\n *                    data={processTreeViewItems(this.state.items, { check: this.state.check })}\n *                />\n *                <div style={{ marginTop: 5 }}>\n *                    <i>Press SPACE to check/uncheck the active item</i>\n *                    <div className=\"example-config\">\n *                        Checked Indices: {this.state.check.join(\",\")}\n *                    </div>\n *                </div>\n *            </div>\n *        );\n *    }\n *    onCheckChange = (event) => {\n *        this.setState({ check: handleTreeViewCheckChange(event, this.state.check, this.state.items) });\n *    }\n * }\n *\n * const tree = [ {\n *    text: 'Furniture', expanded: true, items: [\n *        { text: 'Tables & Chairs' }, { text: 'Sofas' }, { text: 'Occasional Furniture' } ]\n * }, {\n *    text: 'Decor', expanded: true, items: [\n *        { text: 'Bed Linen' }, { text: 'Curtains & Blinds' }, { text: 'Carpets' } ]\n * } ];\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport function handleTreeViewCheckChange(event, check, data, settings, childrenField) {\n    if (settings === void 0) { settings = {}; }\n    if (!data || !data.length) {\n        return [];\n    }\n    var _a = parseOperation(check), ids = _a.ids, idField = _a.idField;\n    var itemId = idField ? getNestedValue(idField, event.item) : event.itemHierarchicalIndex;\n    var idIndex = ids.indexOf(itemId);\n    var itemJustChecked = idIndex === -1;\n    var subItemsField = childrenField || CHILDREN_FIELD;\n    var newIds;\n    if (settings.singleMode) {\n        newIds = itemJustChecked ? [itemId] : [];\n    }\n    else {\n        newIds = ids.slice();\n        itemJustChecked ? newIds.push(itemId) : newIds.splice(idIndex, 1);\n        if (settings.checkChildren) {\n            checkChildren(event.item, event.itemHierarchicalIndex, itemJustChecked, idField, subItemsField, newIds);\n        }\n        if (settings.checkParents) {\n            checkParents(event.itemHierarchicalIndex, itemJustChecked, idField, subItemsField, newIds, data);\n        }\n    }\n    return isArray(check) ? newIds : Object.assign({}, check, { ids: newIds });\n}\nfunction parseOperation(operation) {\n    var ids;\n    var idField = undefined;\n    if (isArray(operation)) {\n        ids = operation;\n    }\n    else {\n        ids = operation.ids || [];\n        idField = operation.idField;\n    }\n    return { ids: ids, idField: idField };\n}\nfunction checkChildren(item, itemHierarchicalIndex, itemJustChecked, idField, childrenField, ids) {\n    getAllDirectIndirectChildrenIds(item, itemHierarchicalIndex, childrenField, idField).forEach(function (itemId) {\n        if (itemJustChecked && ids.indexOf(itemId) === -1) {\n            ids.push(itemId);\n        }\n        else if (!itemJustChecked && ids.indexOf(itemId) > -1) {\n            ids.splice(ids.indexOf(itemId), 1);\n        }\n    });\n}\nfunction checkParents(itemHierarchicalIndex, itemJustChecked, idField, childrenField, ids, data) {\n    var it = makeParentsIterator();\n    var result = it.next();\n    itemJustChecked ? check() : uncheck();\n    function check() {\n        // Check all parents which have all their children checked.\n        while (!result.done) {\n            var _a = result.value, id = _a.id, item = _a.item;\n            // The first check is needed. However, it is not sure whether to stop the entire loop.\n            if (ids.indexOf(id) === -1 &&\n                areAllDirectChildrenChecked(item, id, idField, childrenField, ids)) {\n                ids.push(id);\n                result = it.next();\n            }\n            else {\n                break;\n            }\n        }\n    }\n    function uncheck() {\n        // Uncheck parents until an already unchecked parent is reached.\n        while (!result.done) {\n            var id = result.value.id;\n            var idIndex = ids.indexOf(id);\n            if (idIndex > -1) {\n                ids.splice(idIndex, 1);\n                result = it.next();\n            }\n            else {\n                break;\n            }\n        }\n    }\n    // When called for unchecking, the parent items are not needed.\n    // That is why, for optimization, they are not returned.\n    function makeParentsIterator() {\n        var parents, i, parentId;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!idField) return [3 /*break*/, 5];\n                    parents = getAllParents(itemHierarchicalIndex, childrenField, data);\n                    i = parents.length - 1;\n                    _a.label = 1;\n                case 1:\n                    if (!(i > -1)) return [3 /*break*/, 4];\n                    return [4 /*yield*/, { id: getNestedValue(idField, parents[i]), item: itemJustChecked ? parents[i] : undefined }];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    i--;\n                    return [3 /*break*/, 1];\n                case 4: return [3 /*break*/, 8];\n                case 5:\n                    parentId = getDirectParentId(itemHierarchicalIndex);\n                    _a.label = 6;\n                case 6:\n                    if (!parentId) return [3 /*break*/, 8];\n                    return [4 /*yield*/, { id: parentId, item: itemJustChecked ? getItemById(parentId, data, childrenField) : undefined }];\n                case 7:\n                    _a.sent();\n                    parentId = getDirectParentId(parentId);\n                    return [3 /*break*/, 6];\n                case 8: return [2 /*return*/];\n            }\n        });\n    }\n}\n//# sourceMappingURL=handleTreeViewCheckChange.js.map"]},"metadata":{},"sourceType":"module"}